<div class="container">
    <h2>
        Registration form
    </h2>
    <form #RegisterationForm="ngForm" (ngSubmit)="Onsubmit(RegisterationForm)">
       <h3>Form level validation: {{RegisterationForm.form.valid}}</h3>
        <br>
        {{RegisterationForm.value | json}}
        <br>
        <!-- {{course.value}}<br>
        {{UserModel |json}} -->
        <div class="form-group">
            <label>Name</label>
            <input  [class.is-invalid]="name.invalid && name.touched" #name="ngModel" ngModel name="name" type="text" class="form-control" required>
            <small  *ngIf="name.touched && name.invalid">
                name is required
            </small>
            <small class="text-danger" [class.d-none]="name.valid || name.untouched">
                name is required
            </small>
        </div>
       
        <div class="form-group">
            <label>Email</label>
            <input [(ngModel)]="UserModel.email" name="Email" type="email" class="form-control">
        </div>
        <div class="form-group">
            <label>Phone</label>
            <input ngModel pattern="^\d{10}$" [class.is-invalid]="phone.invalid && phone.touched" #phone="ngModel" name="phone" type="number" class="form-control" required>
           
            <small class="text-danger" *ngIf="phone.errors && phone.errors['touched'] && phone.errors['required']">Phone No is required</small>
            <small class="text-danger" *ngIf="phone.errors && phone.errors['pattern']">10 digits are required</small>
 
            <div *ngIf="phone.errors && (phone.invalid && phone.touched)">
                <small class="text-danger" *ngIf="phone.errors['required']">Phone is required</small>
                <small class="text-danger" *ngIf="phone.errors['pattern']"> 10 digit PhoneNo is required</small>
                <!-- <small class="text-danger" [class.d-none]="utel.valid || utel.untouched" >Phoneno is required of 10 digit</small> -->
            </div>
        </div>
        <div class="form-group">
            <select (blur)="validate(course.value)" (change)="validate(course.value)" class="custom-select form-control" [class.is-invalid]="courseError && course.touched" [(ngModel)]="UserModel.course" name="course" #course="ngModel" required>
                <option value="default" >Select course</option>
                <option *ngFor="let i of courses">
                    {{i}}
                </option>
            </select>
            <small class="text-danger" [class.d-none]="!courseError || course.untouched">Course is required</small>
        </div>
        <!-- <div ngModelGroup="address">
            <div class="form-group">
                <label>Street</label>
                <input ngModel name="street" type="text" class="form-control">
            </div>
            <div class="form-group">
                <label>City</label>
                <input ngModel name="city" type="text" class="form-control">
            </div>
        </div> -->
       
        <div class="form-group">
            <button class="btn btn-outline-primary" [disabled]="courseError || RegisterationForm.form.invalid">submit</button>
        </div>
    </form>
</div>

_________________________

<div class="container">
    <h2>
        Registration form
    </h2>
    <form #RegisterationForm="ngForm" (ngSubmit)="Onsubmit(RegisterationForm)">
       <h3>Form level validation: {{RegisterationForm.form.valid}}</h3>
        <br>
        {{RegisterationForm.value | json}}
        <br>
        <!-- {{course.value}}<br>
        {{UserModel |json}} -->
        <div class="form-group">
            <label>Name</label>
            <input  [class.is-invalid]="name.invalid && name.touched" #name="ngModel" ngModel name="name" type="text" class="form-control" required>
            <small  *ngIf="name.touched && name.invalid">
                name is required
            </small>
            <small class="text-danger" [class.d-none]="name.valid || name.untouched">
                name is required
            </small>
        </div>
       
        <div class="form-group">
            <label>Email</label>
            <input [(ngModel)]="UserModel.email" name="Email" type="email" class="form-control">
        </div>
        <div class="form-group">
            <label>Phone</label>
            <input ngModel pattern="^\d{10}$" [class.is-invalid]="phone.invalid && phone.touched" #phone="ngModel" name="phone" type="number" class="form-control" required>
           
            <small class="text-danger" *ngIf="phone.errors && phone.errors['touched'] && phone.errors['required']">Phone No is required</small>
            <small class="text-danger" *ngIf="phone.errors && phone.errors['pattern']">10 digits are required</small>
 
            <div *ngIf="phone.errors && (phone.invalid && phone.touched)">
                <small class="text-danger" *ngIf="phone.errors['required']">Phone is required</small>
                <small class="text-danger" *ngIf="phone.errors['pattern']"> 10 digit PhoneNo is required</small>
                <!-- <small class="text-danger" [class.d-none]="utel.valid || utel.untouched" >Phoneno is required of 10 digit</small> -->
            </div>
        </div>
        <div class="form-group">
            <select (blur)="validate(course.value)" (change)="validate(course.value)" class="custom-select form-control" [class.is-invalid]="courseError && course.touched" [(ngModel)]="UserModel.course" name="course" #course="ngModel" required>
                <option value="default" >Select course</option>
                <option *ngFor="let i of courses">
                    {{i}}
                </option>
            </select>
            <small class="text-danger" [class.d-none]="!courseError || course.untouched">Course is required</small>
        </div>
        <!-- <div ngModelGroup="address">
            <div class="form-group">
                <label>Street</label>
                <input ngModel name="street" type="text" class="form-control">
            </div>
            <div class="form-group">
                <label>City</label>
                <input ngModel name="city" type="text" class="form-control">
            </div>
        </div> -->
       
        <div class="form-group">
            <button class="btn btn-outline-primary" [disabled]="courseError || RegisterationForm.form.invalid">submit</button>
        </div>
    </form>
</div>

__________________________
import { Component} from "@angular/core";
import { User } from "../Models/User";
import { NgForm } from "@angular/forms";
@Component({
    selector: 'register-tag',
    templateUrl:'./Register.Component.html'
})
 
export class RegisterComponent{
   
    courses=['Angular','React','ASP.NET','C#'];
 
    UserModel=new User('Aditi','aditi@gmail.com',8619290838,'default');
 
    courseError=true;
    validate(data:any){
        if(data=="default"){
            this.courseError=true;
        }
        else{
            this.courseError=false;
        }
    }
 
    Onsubmit(form:NgForm){
        // console.log(this.UserModel);
        console.log(form.value);
    }
}
________________________
import { Component } from '@angular/core';
import { FormControl, FormGroup,FormBuilder } from '@angular/forms';
@Component({
  selector: 'app-register-reactive',
  templateUrl: './register-reactive.component.html',
  styleUrls: ['./register-reactive.component.css'],
  providers:[FormBuilder]
})
export class RegisterReactiveComponent {
 
  constructor(private fb:FormBuilder){
 
  }
 
 
 
  // RegistrationForm=new FormGroup(
  //   {
  //     UserName:new FormControl("Aditi"),
  //     Password:new FormControl(''),
  //     ConfirmPassword:new FormControl(''),
  //     Address:new FormGroup({
  //       City:new FormControl(''),
  //       State:new FormControl(''),
  //       Country:new FormControl('')
  //     })
  //   }
  // )
 
 
 
  LoadApiData(){
    this.RegistrationForm.patchValue({
        "UserName":"Devin",
        "Password":"Admin",
        "ConfirmPassword":"Admin",
       
      })
  }
 
  //this.RegistrationForm.setValue({
    //   "UserName":"John",
    //   "Password":"Admin",
    //   "ConfirmPassword":"Admin",
    //   Address:{
    //     "City":"Noida",
    //     "State":"UP",
    //     "Country":"India"
    //   }
    // })
 
}
_______________________
Reactive Forms

1. Code and logic resides in Component class.

2. Good for complex scenerios.

3. Here we don't do two-way binding.

4. Add fields dynamically.

5. Custom Validation.

6. Dynamic Validation.

7. Unit testing was difficult in tdf but it is easy in reactive forms.

Reactive form demo approach--

1. Add HTML form.

2. Add form Model.

3. Provide FormControl values.

4. Use FormBuilder Service. FormBuilder is a service so we have to import it and it is useful to write less code.

5. Validations--> Simple validation, custom validation, dynamic validation, cross field validation (password)

6. Add Dynamic FormControl

7. Data Submit

Simple Validation by Validator class

1. Apply validation

2. Visual feedback/ UX - Red border.

3. Error Message

________________________
Component ts file
 
 
 
import { Component } from '@angular/core';
import { FormControl, FormGroup,FormBuilder } from '@angular/forms';
@Component({
  selector: 'app-register-reactive',
  templateUrl: './register-reactive.component.html',
  styleUrls: ['./register-reactive.component.css'],
  providers:[FormBuilder]
})
export class RegisterReactiveComponent {
 
  constructor(private fb:FormBuilder){
 
  }
  RegistrationForm=this.fb.group({
    UserName:['Aditi'],
    Password:['Admin'],
    ConfirmPassword:['Admin'],
    Address:this.fb.group({
      City:['Noida'],
      State:['UP'],
      Country:['India']
    })
  })
 
 
  // RegistrationForm=new FormGroup(
  //   {
  //     UserName:new FormControl("Aditi"),
  //     Password:new FormControl(''),
  //     ConfirmPassword:new FormControl(''),
  //     Address:new FormGroup({
  //       City:new FormControl(''),
  //       State:new FormControl(''),
  //       Country:new FormControl('')
  //     })
  //   }
  // )
 
 
 
  LoadApiData(){
    this.RegistrationForm.patchValue({
        "UserName":"Devin",
        "Password":"Admin",
        "ConfirmPassword":"Admin",
       
      })
  }
 
  //this.RegistrationForm.setValue({
    //   "UserName":"John",
    //   "Password":"Admin",
    //   "ConfirmPassword":"Admin",
    //   Address:{
    //     "City":"Noida",
    //     "State":"UP",
    //     "Country":"India"
    //   }
    // })
 
}
________________
HTML file 

HTML file
 
 
 
<div class="container-fluid">
<form [formGroup]="RegistrationForm">
    {{RegistrationForm.value | json}}
    <div class="form-group">
        <label>User Name</label>
        <input type="text" class="form-control" formControlName="UserName">
    </div>
    <div class="form-group">
        <label>Password</label>
        <input type="password" class="form-control" formControlName="Password">
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <input type="password" class="form-control" formControlName="ConfirmPassword">
    </div>
    <div  formGroupName="Address">
        <div class="form-group">
            <label>City</label>
            <input type="text" class="form-control" formControlName="City">
        </div>
        <div class="form-group">
            <label>State</label>
            <input type="text" class="form-control" formControlName="State">
        </div>
        <div class="form-group">
            <label>Country</label>
            <input type="text" class="form-control" formControlName="Country">
        </div>
    </div>
    <div class="form-group">
        <button class="btn btn-outline-primary">Submit</button>
        <button class="btn btn-secondary" (click)="LoadApiData()">Load Api Data</button>
    </div>
</form>
 
</div>